#!/usr/bin/env node

/**
 * Hitch Command Line Tool v1.0.0
 * Lightweight backbone based single page application framework
 *
 * @author: Philipp Boes <mostgreedy@gmail.com>
 * @copyright: (c) 2012 Philipp Boes
 * @version: 1.0.0
 */

var fs = require('fs')
  , exec = require('child_process').exec
  , _ = require('underscore')
  , inflect = require('inflection')
  , PATH_SELF = __dirname
  , PATH_ROOT = fs.realpathSync(PATH_SELF + '/../')
  , ConsoleUtils = function() {
    this._handlers = {};
    this._commands = {};
  };

ConsoleUtils.prototype.pushCommand = function(command, callback) {

  if (!command instanceof ConsoleUtils.Command) {
    throw new Error("first argument needs to be an instance of ConsoleUtils.Command");
  }

  if (!_.isFunction(callback)) {
    throw new Error("second argument must be a valid callback");
  }

  if (this._commands[command.name]) {
    throw new Error("this command is already registered");
  }

  this._commands[command.name] = command;
  this._handlers[command.name] = callback;
};

ConsoleUtils.prototype.run = function() {

  var args = _.rest(process.argv, 2)
    , dispatched = false;

  _.each(this._handlers, function(callback, name) {
    var command = this._commands[name];
    if (command.accepts(args)) {
      callback.apply(this, _.rest(args));
      dispatched = true;
    }
  }, this);

  if (!dispatched) showHelp();
};


ConsoleUtils.Command = function(name) {
  this.name = name;
};

ConsoleUtils.Command.prototype.accepts = function(args) {
  if (!args.length) return false;
  if (this.name !== args[0]) return false;
  return true;
};

function showHelp() {

  console.log('');
  console.log('+---------------------------------------------------------------+');
  console.log('|                      Hitch Console Utils                      |');
  console.log('|                            v1.0.0                             |');
  console.log('+---------------------------------------------------------------+');
  console.log('');
  console.log('USAGE: hitch [command] [args] (e.g. `hitch create MyApplication`)');
  console.log('');
  console.log('- build [target]', '       ', 'build project dependencies');
  console.log('- create [path]', '        ', 'creates a fresh hitch application');
  console.log('- help', '                 ', 'shows this information');
  console.log('');

}

function createApplication(path) {

  var data, appName;

  // ensure path
  if (!path) {
    path = process.cwd();
  } else if (path.charAt(0) !== '/') {
    path = process.cwd() + '/' + path;
  }

  // check app dir
  if (!exists(path)) {
    fs.mkdirSync(path, 0755);
  }

  // apply app name
  appName = path.split('/').pop();

  // ensure hitch.json
  if (!exists(path + '/hitch.json')) {
    createFileFromTemplate(path + '/hitch.json', 'hitch.json', {
      name: appName,
      apiUrl: '',
      version: '1.0',
      root: '/',
      pushState: false
    });
  }

  // read configuration
  data = parseJSONFile(path + '/hitch.json');

  // check configuration
  if (!data || !data.name || !data.version) {
    console.log('invalid hitch configuration.');
    process.exit();
    return;
  }

  // create the app skeleton
  [
    'assets',
    'public',
    'public/css',
    'public/img',
    'public/js',
    'public/js/app',
    'public/js/app/modules',
    'public/js/app/resources',
    'public/js/app/templates',
    'public/js/app/views',
    'public/js/vendor'
  ].forEach(function(p) {
    fs.mkdirSync(path + '/' + p, 0755);
  });

  // copy dependencies
  exec('cp ' + PATH_ROOT + '/node_modules/backbone/backbone.js ' + path + '/public/js/vendor/backbone.js');
  exec('cp ' + PATH_ROOT + '/node_modules/underscore/underscore.js ' + path + '/public/js/vendor/underscore.js');
  exec('cp ' + PATH_ROOT + '/node_modules/requirejs/require.js ' + path + '/public/js/vendor/require.js');
  exec('cp ' + PATH_ROOT + '/node_modules/jquery/tmp/jquery.js ' + path + '/public/js/vendor/jquery.js');
  exec('cp ' + PATH_ROOT + '/hitch.js ' + path + '/public/js/vendor/hitch.js');

  // generate mandatory files
  createFileFromTemplate(path + '/public/js/app/index.js', 'app', data);
  createFileFromTemplate(path + '/public/index.html', 'index', data);

  // build
  buildTarget('all', path);
}

function buildTarget(target, path) {

  var data;

  path = path || process.cwd();
  data = parseJSONFile(path + '/hitch.json');

  if (!data) {
    throw new Error("invalid location. no hitch.json found in path");
  }

  switch (target) {

    case 'modules':
      generateModules(path, data);
      break;
    case 'resources':
      generateResources(path, data);
      break;
    case 'main':
      generateBootstrap(path, data);
      break;
    case 'all':
      generateModules(path, data);
      generateResources(path, data);
      generateBootstrap(path, data);
      break;
    default:
      throw new Error("invalid build target. Use one of modules,resources,main,all.");
  }

}

function generateModules(path, data) {
  if (data && _.size(data.modules)) {
    _.each(data.modules, function(module, name) {
      generateModule(path, name, data);
    });
  }
}

function generateResources(path, data) {
  if (data && _.size(data.resources)) {
    _.each(data.resources, function(resource, name) {
      generateResource(path, name, data);
    });
  }
}

function generateBootstrap(path, data) {
  fs.unlinkFile(path + '/public/js/main.js');
  createFileFromTemplate(path + '/public/js/main.js', 'main', data);
}

function generateResource(path, name, data) {

  var resourceFile = path + '/public/js/app/resources/' + name + '.js';

  if (!exists(resourceFile)) {

    createFileFromTemplate(resourceFile, 'resource', _.extend({
      resource: name,
      model: inflect.classify(name)
    }, data));
  }
}

function generateModule(path, name, data) {

  var modulePath = path + '/public/js/app/modules/' + name;

  if (!exists(modulePath)) {

    fs.mkdirSync(modulePath, 0755);
    fs.mkdirSync(modulePath + '/templates', 0755);
    fs.mkdirSync(modulePath + '/views', 0755);

    createFileFromTemplate(modulePath + '/index.js', 'module', _.extend({
      module: inflect.classify(name)
    }, data));
  }
}

function createFileFromTemplate(filename, template, data) {

  var filePath = PATH_SELF + '/data/' + template + '.ejs'
    , contents, tmpl, compiled;

  if (exists(filePath)) {

    contents = fs.readFileSync(filePath).toString();

    tmpl = _.template(contents);

    compiled = tmpl(_.extend({
      ucFirst: function(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      }
    }, data));

    fs.writeFileSync(filename, compiled);
  }
}

function exists(name) {

  var stat;

  try {

    stat = fs.lstatSync(name);
    return stat.isFile() || stat.isDirectory();

  } catch (err) {
  }

  return false;
}

function parseJSONFile(file) {
  if (exists(file)) {
    return JSON.parse(fs.readFileSync(file));
  }
}

var cli = new ConsoleUtils();

cli.pushCommand(new ConsoleUtils.Command('build'), buildTarget);
cli.pushCommand(new ConsoleUtils.Command('create'), createApplication);
cli.pushCommand(new ConsoleUtils.Command('help'), showHelp);
cli.run();